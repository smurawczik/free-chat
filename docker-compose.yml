version: '3.8'
services:
  frontend:
    container_name: app
    image: app
    build:
      context: ./frontend
      target: debug
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - database
      - users
      - orchestrator
  orchestrator:
    container_name: orchestrator
    image: orchestrator
    build:
      context: ./backend/orchestrator
      target: debug
    ports:
      - 3000:3000
    environment:
      - USERS_API_URL=http://users:3001
      - FRONTEND_URL=http://localhost:5173
      - PORT=3000
    volumes:
      - ./backend/orchestrator:/orchestrator
      - /orchestrator/node_modules
    depends_on:
      - users
      - database
  users:
    container_name: users
    image: users
    volumes:
      - ./backend/users:/users
      - /users/node_modules
    build:
      context: ./backend/users
      target: debug
    environment:
      - DB_HOST=database
      - GATEWAY_API_URL=http://orchestrator:3000
      - PORT=3001
    ports:
      - 3001:3001
    depends_on:
      - database
      - chat-database
      - redis

  database:
    image: postgres
    container_name: database
    restart: on-failure
    volumes:
      - ./backend/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: chat-dev
    ports:
      - 5432:5432

  chat-database:
    image: mysql
    container_name: chat-database
    restart: on-failure
    volumes:
      - ./backend/chat-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: docker
      MYSQL_DATABASE: conversations
      MYSQL_USER: docker
      MYSQL_PASSWORD: docker
    ports:
      - 3306:3306

  redis:
    image: redis
    container_name: redis
    restart: on-failure
    volumes:
      - ./backend/redis-queues-data:/data
    ports:
      - 6379:6379

  